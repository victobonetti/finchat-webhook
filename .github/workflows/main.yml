# This is a basic workflow to help you get started with Actions
name: Build and Push Docker Image

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ "main" ]
  # Triggers the workflow when a new release is created
  release:
    types: [ created ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build-and-push"
  build-and-push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 1. Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up QEMU for multi-platform builds (optional but good practice)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 3. Set up Docker Buildx for advanced image building features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Log in to Docker Hub
      #    You will need to create repository secrets for your Docker Hub username and a personal access token.
      #    Go to your GitHub repository's Settings > Secrets and variables > Actions to add them.
      #    - DOCKERHUB_USERNAME: Your Docker Hub username.
      #    - DOCKERHUB_TOKEN: Your Docker Hub access token.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Extract metadata (tags and labels) for Docker
      #    This step automatically creates tags for your Docker image.
      #    - For pushes to the `main` branch, it will use the tag `latest`.
      #    - When you create a release (e.g., v1.0.0), it will use the release tag as the Docker tag.
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: victobonetti/finchat

      # 6. Set up JDK 21 for the build
      #    Adjust the 'java-version' if your project requires a different one.
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      # 7. Build the application with Maven
      #    This runs the 'mvnd clean install package' command you specified.
      #    We use 'mvn -B' which is the standard for non-interactive CI environments.
      - name: Build with Maven
        run: mvn -B clean install package --file pom.xml

      # 8. Build and push the Docker image
      #    This step uses the Dockerfile from your project, builds the image,
      #    and pushes it to Docker Hub with the tags generated in the metadata step.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/main/docker/Dockerfile.jvm
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

